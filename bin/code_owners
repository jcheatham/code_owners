#!/usr/bin/env ruby

$LOAD_PATH << File.join(File.dirname(__FILE__), '..', 'lib')
require 'code_owners'
require 'code_owners/version'
require 'optparse'

options = {ignores: []}
OptionParser.new do |opts|
  opts.banner = "usage: code_owners [options]"
  opts.on('-u', '--unowned', TrueClass, 'Display unowned files only') do |u|
    options[:unowned] = u
  end
  opts.on('-e', '--error-unowned', TrueClass, 'Exit with error status if any files are unowned') do |e|
    options[:error_unowned] = e
  end
  opts.on('-i', '--ignore FILE', String, 'A file of gitignore patterns to filter out of results, may be specified multiple times, only supported by -n option for now') do |i|
    options[:ignores] << i
  end
  opts.on('-l', '--log', TrueClass, 'Log stuff') do |l|
    options[:log] = l
  end
  opts.on('-n', '--no-git', TrueClass, '[experimental] Use a git-free, pure ruby based implementation') do |n|
     options[:no_git] = n
   end
  opts.on('-v', '--version', TrueClass, 'Display the version of the gem') do |_|
    puts "Version: #{CodeOwners::VERSION}"
    exit 0
  end
end.parse!

unless options[:no_git]
  unless system('git --version > /dev/null')
    STDERR.puts 'Git does not appear to be installed.'
    exit 2
  end

  unless system('git rev-parse --is-inside-work-tree > /dev/null')
    STDERR.puts 'The current working directory must be a Git repo.'
    exit 3
  end
end

unowned_error = false
CodeOwners.ownerships(options).each do |ownership_status|
  owner_info = ownership_status[:owner].dup
  if owner_info != CodeOwners::NO_OWNER
    next if options[:unowned]
  else
    unowned_error ||= options[:error_unowned]
  end
  owner_info += " per line #{ownership_status[:line]}, #{ownership_status[:pattern]}" if owner_info != "UNOWNED"
  puts "#{ownership_status[:file].ljust(100,' ')} #{owner_info}"
end

exit(unowned_error && 1 || 0)
